[DEFAULT]

# Domain to view whitelist webpages, add, and delete entries
# If you change this you will also have to modify your squid config.
whitetrash_domain="whitetrash"

# You can enable this option to make whitetrash build an initial whitelist
# by automatically adding every domain it sees.  Note that it could be adding
# malware, so use with caution.  Once an initial list has been built this needs
# to be set to False.  I recommend you review any whitelist created in this way
# before the domains are "blessed" as known good.
auto_add_all_domains="False"

# Use memcached for super-fast performance.  Whitelist is cached in RAM
# and distributed across multiple servers.  Note that you should consider
# the security implications of where memcache is running, especially if you run
# it on machines other than the whitetrash server.  Wherever you run it you should 
# protect it to make sure the cache cannot be accessed by any person or program
# other than whitetrash.  Firewall rules and SSH tunnels might be one way to do
# this.
use_memcached="False"

# Comma separated memcached server list.  Read security notes above.
memcache_servers="127.0.0.1:11211"

# Automatic Wildcarding behaviour, this is what happens by default without user intervention
# You can give users choice over these decisions by turning on the prompts below.
# ALL - all subdomains back to TLD whitelisted automatically: www.yahoo.com whitelists a.a.cdn.yahoo.com
# ONE - one label wildcarded: www.google.com becomes *.google.com
# NONE - only whitelist the requested domain
AUTO_WILDCARD = "ONE"

# If True, user gets a tick box on the form to allow them to whitelist all subdomains 
ALL_WILDCARD_PROMPT = "False"

# If True, user gets a tick box on the form to allow them to whitelist a single label wildcard 
ONE_WILDCARD_PROMPT = "False"

# Number of entries to display per page on the whitelist server when viewing
# the whitelist
PAGE_LIST_LENGTH = "50"

# Perform a CAPTCHA (human) test before adding a HTTP domain
CAPTCHA_HTTP = "False"
# Perform a CAPTCHA (human) test before adding a SSL domain
CAPTCHA_SSL = "False"

# Window of opportunity user has to solve the CAPTCHA in seconds
# if window is exceeded, new CAPTCHA test is presented
CAPTCHA_WINDOW_SEC = "30"

# After this number of days without a hit, the whitetrash_cleanup.py script will
# remove the domain from the database.  Note whitetrash_cleanup will have
# to be installed as a cron or run manually
timeout_in_days = 90
# If true, we will delete domains older than timeout_in_days,
# If false, we will just set the domains to disabled.  This may result
# in a very large database.
delete_old_domains = "False"

# Used during install to create a cron job for cleaning up old domains
cleanup_cron = "0 3 * * * whitetrash /usr/local/bin/whitetrash_cleanup.py"

# Using authentication to add entries is recommended, but this option is here
# to turn off authentication and allow anonymous users to add entries to the whitelist.
LOGIN_REQUIRED = "True"

# Database params 
DATABASE_NAME = 'whitetrash'        
DATABASE_HOST = ''    
DATABASE_PORT = '3306'
DATABASE_UNIX_SOCKET="/var/run/mysqld/mysqld.sock"

#Django database user
DATABASE_DJANGO_USER = 'whitetrash_djan'       
DATABASE_DJANGO_PASSWORD = 'Jangl3DDjANg00'    
# Whitetrash redirector user 
DATABASE_WHITETRASH_USER = 'whitetrash_redir'
DATABASE_WHITETRASH_PASSWORD = 'SquIDR3directR'
# whitetrash_cleanup.py user
DATABASE_CLEANUP_USER = 'whitetrash_clean'
DATABASE_CLEANUP_PASSWORD = 'Cl33nThislis7'

#Set this to true to use LDAP, then change the LDAP
#settings in settings.py
LDAP_AUTH = "False"

#Disable SSL for the whitetrash server.  You shouldn't need to do this but if it is necessary
#you will also need to remove the rewrite directive in:
#/etc/apache2/sites-available/whitetrash
ssl_server_enabled = "True"

# dummy_content URL will return a 404 for content that is not whitelisted and is NOT html.
# i.e. stuff that matches the nonhtml_suffix regex.
# Typically this is jpg,gif,png or other media served off a domain that is not in the whitelist
# Use a 404 because it is quick.  
nonhtml_suffix_re=".*(jpg|gif|png|css|js|ico|swf)$"

# Domain fail indicator for redirectors.  You shouldn't need to change this.
domain_fail_string="invalid_try_again"

#Valid domain regex.  Be very careful about changing this.
# Labels 1-50 chars only a-z, digits and dash.
# 1-6 Labels
# 2-6 char suffix (everything from .uk to .museum)
domain_regex="^([a-z0-9-]{1,50}\.){1,6}[a-z]{2,6}$"

# SSL Certificate Generation
cert_server_listen_addr = ""
cert_server_listen_port = "3456"
pidfile = "/var/run/whitetrash_cert.pid"
dynamic_certs_dir = "/var/whitetrash_dynamic_certs/"
dynamic_certs_keyfile = "/var/whitetrash_dynamic_certs/whitetrash_dyn_cert_key.pem"
ca_pass = "/etc/ssl/capass.txt"
cacert_dir = "/etc/ssl/whitetrashCA"
#How many years the auto-generated certificates are valid for.
certificate_years = "3"
#How many bytes in the serial number for generated certificates
#needs to be big to avoid collisions
serial_number_bytes = "16"
#Issue cert for this many seconds before "now".  Means we don't
#end up issuing invalid certs if desktop clocks are slightly off
certificate_time_offset_s = "7200"
#Certificate details - users will see this in the certificates generated.
country="US"
state="NY"
city="New York"
org_unit="Whitetrash"

# Google Safe Browsing
# Do google safebrowsing checking - requires memcached
safebrowsing = "False"
# Google safebrowsing API key
# Generate your own key at: http://code.google.com/apis/safebrowsing/key_signup.html
safebrowsing_api_key="Somerealllyloooongstring" 
#Uncomment this if you have an upstream proxy
safebrowsing_proxy="http://myupstreamproxy:3128"
# The update interval for the safebrowsing list (in seconds).
# The API requires this to be between 25 and 30 minutes.
safebrowsing_up_interval_s = 1500


# Python logging configuration.
[loggers]
keys=root,django,squidredir,certserver,safebrowsing,cleanup

[logger_django]
level=DEBUG
handlers=syslog
propagate=0
qualname=whitetrashDjango

[logger_cleanup]
level=DEBUG
handlers=syslog
propagate=0
qualname=whitetrashCleanup

[logger_squidredir]
level=DEBUG
handlers=syslog
propagate=0
qualname=whitetrashRedir

[logger_certserver]
level=DEBUG
handlers=syslog
propagate=0
qualname=whitetrashCertServer

[logger_safebrowsing]
level=DEBUG
handlers=syslog
propagate=0
qualname=whitetrashSafeBrowsing

[logger_root]
level=DEBUG
handlers=syslog

[handlers]
keys=syslog

# Send everything to syslog
# levels: DEBUG,INFO,WARNING,ERROR,CRITICAL
# Define new python logging handlers here if you want to change
# this behaviour.
[handler_syslog]
level=INFO
class=handlers.SysLogHandler
formatter=simpleFormatter
args=("/dev/log", handlers.SysLogHandler.LOG_USER)

[formatters]
keys=simpleFormatter

[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s

