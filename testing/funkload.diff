Index: funkload/PatchWebunit.py
===================================================================
--- funkload/PatchWebunit.py	(revision 51139)
+++ funkload/PatchWebunit.py	(working copy)
@@ -48,50 +48,64 @@
 SEP_BOUNDARY = '--' + BOUNDARY
 END_BOUNDARY = SEP_BOUNDARY + '--'
 
-def mimeEncode(data, sep_boundary=SEP_BOUNDARY, end_boundary=END_BOUNDARY):
+def mimeEncode(data, sep_boundary=SEP_BOUNDARY, end_boundary=END_BOUNDARY,postformat='multipart/form-data'):
     '''Take the mapping of data and construct the body of a
     multipart/form-data message with it using the indicated boundaries.
     '''
     ret = cStringIO.StringIO()
     first_part = True
+    if postformat=='multipart/form-data':
+        for key, value in data.items():
+            if not key:
+                continue
+            # handle multiple entries for the same name
+            if type(value) != type([]):
+                value = [value]
+            for value in value:
+                # Don't add newline before first part
+                if first_part:
+                    first_part = False
+                else:
+                    ret.write('\r\n')
+                ret.write(sep_boundary)
 
-    for key, value in data.items():
-        if not key:
-            continue
-        # handle multiple entries for the same name
-        if type(value) != type([]):
-            value = [value]
-        for value in value:
-            # Don't add newline before first part
-            if first_part:
-                first_part = False
-            else:
-                ret.write('\r\n')
-            ret.write(sep_boundary)
-
-            # if key starts with a '$' then the entry is a file upload
-            if isinstance(value, Upload):
-                ret.write('\r\nContent-Disposition: form-data; name="%s"'%key)
-                ret.write('; filename="%s"\r\n' % value.filename)
-                if value.filename:
-                    mimetype = guess_type(value.filename)[0]
-                    if mimetype is not None:
-                        ret.write('Content-Type: %s\r\n' % mimetype)
-                    value = open(os.path.join(value.filename), "rb").read()
+                # if key starts with a '$' then the entry is a file upload
+                if isinstance(value, Upload):
+                    ret.write('\r\nContent-Disposition: form-data; name="%s"'%key)
+                    ret.write('; filename="%s"\r\n' % value.filename)
+                    if value.filename:
+                        mimetype = guess_type(value.filename)[0]
+                        if mimetype is not None:
+                            ret.write('Content-Type: %s\r\n' % mimetype)
+                        value = open(os.path.join(value.filename), "rb").read()
+                    else:
+                        value = ''
+                    ret.write('\r\n')
                 else:
-                    value = ''
-                ret.write('\r\n')
-            else:
-                ret.write('\r\nContent-Disposition: form-data; name="%s"'%key)
-                ret.write("\r\n\r\n")
-            ret.write(str(value))
-            if value and value[-1] == '\r':
-                ret.write('\r\n')  # write an extra newline
-    ret.write('\r\n')
-    ret.write(end_boundary)
-    return ret.getvalue()
+                    ret.write('\r\nContent-Disposition: form-data; name="%s"'%key)
+                    ret.write("\r\n\r\n")
+                ret.write(str(value))
+                if value and value[-1] == '\r':
+                    ret.write('\r\n')  # write an extra newline
+        ret.write('\r\n')
+        ret.write(end_boundary)
+        return ret.getvalue()
 
+    elif postformat=='application/x-www-form-urlencoded':
+        if first_part:
+            ret.write('\r\n')
+            first_part = False
+        for key, value in data.items():
+            if not key:
+                continue
+            ret.write(str(key)+"="+str(value)+"&")
 
+        return ret.getvalue()[:-1]
+
+    else:
+        raise ValueError, postformat
+
+
 class FKLIMGSucker(IMGSucker):
     """Image and links loader, patched to log response stats."""
     def __init__(self, url, session, ftestcase=None):
@@ -170,7 +184,7 @@
 
 # WebFetcher fetch
 def WF_fetch(self, url, postdata=None, server=None, port=None, protocol=None,
-             ok_codes=None):
+             ok_codes=None,postformat=None):
     '''Run a single test request to the indicated url. Use the POST data
     if supplied.
 
@@ -256,14 +270,23 @@
                     if selected: postdata[field].append(k)
 
         # Do a post with the data file
-        params = mimeEncode(postdata)
+
+        params = mimeEncode(postdata,postformat=postformat)
         if webproxy:
             h.putrequest('POST', "http://%s%s" % (host_header, url))
         else:
             # Normal post
             h.putrequest('POST', url)
-        h.putheader('Content-type', 'multipart/form-data; boundary=%s'%
-            BOUNDARY)
+        try:
+            if postformat == 'application/x-www-form-urlencoded':
+                h.putheader('Content-type', postformat)
+            elif postformat == 'multipart/form-data':
+                h.putheader('Content-type', 'multipart/form-data; boundary=%s'% BOUNDARY)
+            else:
+                raise ValueError, postformat
+        except:
+            h.putheader('Content-type', 'multipart/form-data; boundary=%s'% BOUNDARY)
+
         h.putheader('Content-length', str(len(params)))
     else:
         if webproxy:
Index: funkload/FunkLoadTestCase.py
===================================================================
--- funkload/FunkLoadTestCase.py	(revision 51139)
+++ funkload/FunkLoadTestCase.py	(working copy)
@@ -164,11 +164,11 @@
     #------------------------------------------------------------
     # browser simulation
     #
-    def _connect(self, url, params, ok_codes, rtype, description):
+    def _connect(self, url, params, ok_codes, rtype, description, postformat):
         """Handle fetching, logging, errors and history."""
         t_start = time.time()
         try:
-            response = self._browser.fetch(url, params, ok_codes=ok_codes)
+            response = self._browser.fetch(url, params, ok_codes=ok_codes,postformat=postformat)
         except:
             etype, value, tback = sys.exc_info()
             t_stop = time.time()
@@ -201,7 +201,8 @@
             self.total_links += 1
         if rtype in ('post', 'get', 'redirect'):
             # this is a valid referer for the next request
-            self.setHeader('Referer', url)
+            #self.setHeader('Referer', url)
+            pass
         self._browser.history.append((rtype, url))
         self.logd(' Done in %.3fs' % t_delta)
         self._log_response(response, rtype, description, t_start, t_stop)
@@ -213,7 +214,7 @@
                 description=None, ok_codes=None,
                 method='post',
                 follow_redirect=True, load_auto_links=True,
-                sleep=True):
+                sleep=True,postformat=None):
         """Simulate a browser handle redirects, load/cache css and images."""
         self._response = None
         # Loop mode
@@ -255,7 +256,7 @@
                                                           self.steps,
                                                           description or ''))
         # Fetching
-        response = self._connect(url, params, ok_codes, method, description)
+        response = self._connect(url, params, ok_codes, method, description,postformat)
 
         # Check redirection
         if follow_redirect and response.code in (301, 302):
@@ -266,7 +267,7 @@
                 newurl = response.headers['Location']
                 url = urljoin(url_in, newurl)
                 self.logd(' Load redirect link: %s' % url)
-                response = self._connect(url, None, ok_codes, 'redirect', None)
+                response = self._connect(url, None, ok_codes, 'redirect', None,postformat)
                 max_redirect_count -= 1
             if not max_redirect_count:
                 self.logd(' WARNING Too many redirects give up.')
@@ -323,12 +324,12 @@
 
         return response
 
-    def post(self, url, params=None, description=None, ok_codes=None):
+    def post(self, url, params=None, description=None, ok_codes=None, postformat=None):
         """POST method on url with params."""
         self.steps += 1
         self.page_responses = 0
         response = self._browse(url, params, description, ok_codes,
-                                method="post")
+                                method="post",postformat=postformat)
         return response
 
     def get(self, url, params=None, description=None, ok_codes=None):
