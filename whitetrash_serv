#!/usr/bin/env python

# Author: gregsfdev@users.sourceforge.net
# License: GPL
#
# This file is part of Whitetrash.
# 
#     Whitetrash is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     Whitetrash is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with Whitetrash; if not, write to the Free Software
#     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 

import BaseHTTPServer, SimpleHTTPServer, SocketServer
import os,sys,time,cgi
from base64 import decodestring
import re,urllib
import datetime
import MySQLdb
import MySQLdb.cursors


class Log:
    """ The class for logging to a file.  Contains a flush after every write to ensure everything is logged even during an unexpected exit."""
    def __init__(self, f):
        self.f = f
    def write(self, s):
        self.f.write(s)
        self.f.flush()


class WhitelistCGIRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):


    def failed(self,e):
        self.wfile.write("""
        <HTML>

        <HEAD>
        <TITLE>Error - Cannot add domain to whitelist</TITLE>
        </HEAD>

        <BODY>

        <h1>Could not add domain to whitelist</h1>
        <p>
        Please contact your friendly sysadmin.  Error details as follows
        <p>
        <hr>
        <p>%s</p>

        </BODY>

        </HTML>

        """ % (e))

    def success(self,orig_url,user,domain):
        dateobj=datetime
        self.wfile.write(""" 
        <HTML>

        <HEAD>
        <TITLE>Access Granted</TITLE>
        <META HTTP-EQUIV=\"refresh\" CONTENT=\"1;URL=%s\">
        </HEAD>

        <BODY>

        <h1>Thank you %s</h1>
        <p>
        Your access request has been granted.  Your browser should automatically take you to the website. If it doesn't you can use this link: <a href=\"%s\">%s</a>
        <p>

        <p>The following information was recorded:</p>

        <table border=1 frame=box>

        <tr><td><b>TimeStamp</b></td><td><b>Username</b></td><td><b>Whitelist site added</b></td><td><b>Original Request</b></td></tr>

        <tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>

        </table>


        </BODY>

        </HTML>

        """ % (orig_url,user,orig_url,orig_url,str(dateobj.datetime.now()),user,domain,orig_url))


    def add_to_whitelist(self,form):

        try:
            #All of these fields need to be sanitised.
            orig_comment=str(form.getfirst("comment"))[:99]
            orig_url=str(form.getfirst("url"))[:254]
            user=str(form.getfirst("user"))
            domain=str(form.getfirst("domain"))[:70]
            if orig_url and user and domain:
                if not orig_comment:
                    orig_comment="None"

                #Quote the url to get rid of any dangerous stuff for the DB, but still display the proper text when viewed in a browser.
                url=urllib.quote(orig_url.lower())
                #Only allow sane text in the comment.
                comment=re.sub("[^a-zA-Z0-9- .,!]+","",orig_comment)

                #sanitise domain
                domain=form.getfirst("domain").lower()
                #Make sure it is of something.com format
                domain_sanitise=re.compile("^([a-z0-9-]{1,50}\.){1,6}[a-z]{2,6}$")
                domain_res=domain_sanitise.match(domain)
                if domain_res:
                    #Domain is valid.
                    domain=domain_res.group()
                    domain=re.sub("^www[0-9]?\.","",domain,1)
                    dbh = MySQLdb.Connect(user = "unpriv",
                                                passwd = "passwd",
                                                db = "proxy",
                                                unix_socket = "/var/run/mysqld/mysqld.sock", 
                                                use_unicode = False
                                                )

                    try:
                        cursor=dbh.cursor()
                        #Normalise www2 to www
                        cursor.execute("insert into whitelist set domain=%s,timestamp=NOW(),username=%s,originalrequest=%s,comment=%s", (domain,user,url,comment))
                        self.success(orig_url,user,domain)
                    except Exception,e:
                        self.failed(e)
                else:
                    #Decided to fail rather than change to a valid domain name.
                    self.failed("Bad domain name")
            else:
                self.failed("Incomplete fields")
        except Exception,e:
            self.failed("Invalid input:%s" % e)


    def invalid_auth(self):
        self.wfile.write("""

        <HTML>
        
        <HEAD>
        <TITLE>Authentication Error</TITLE>
        </HEAD>
        
        <BODY>
        
        <h1>Authentication Error</h1>
        
        The Proxy-Authorization header did not contain the expected authorisation value.  Either you haven't authenticated to the proxy or you are trying something dodgy.  Contact your friendly sysadmin.
        
        </BODY>
        
        </HTML>
        
        """)
        
    def invalid_request(self,params):
        self.wfile.write("""

        <HTML>
        
        <HEAD>
        <TITLE>CGI Error</TITLE>
        </HEAD>
        
        <BODY>
        
        <h1>CGI Error</h1>
        
        <P>I didn't get the parameters I was expecting from your request.  Here are the parameters I got:<P>
        <pre>
        %s
        <pre>
        
        <p>Contact your friendly sysadmin.</p>
        
        </BODY>
        
        </HTML>
        
        """ % params)

    def strp(self,string):
        """A tiny function to stip out string junk from cgi.qs"""
        return str(string)[2:-2]

    def write_form(self,request):

        domain=self.strp(request["domain"])
        url=self.strp(request["url"])
        clientaddr=self.strp(request["clientaddr"])
        clientident=self.strp(request["clientident"])

        self.wfile.write("""
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
        <html>
        <head>
            <title>Internet Access Request Form</title>
        </head>

        <body>
            <h1>Internet Access Request</h1>    
            <form action="http://whitelistproxy" method="post">

            <p><b>Host Requested (edit if necessary): </b><input type="text" name="domain" value="%s" maxlength=70 size=70></p>
            <p><b>Full Request: </b>%s</p>
            <p><b>Client IP: </b>%s</p>
            <p><b>Client Username: </b>%s</p>
            <p><b>Enter business requirement or comment for this domain: </b><input type="text" name="comment" maxlength=100 size=100></p>
            
            <p>By clicking "I Agree" below you are agreeing to have the information above stored on a list of whitelisted websites with YOUR UNIQUE USERNAME at <a href="http://viewwhitelist/whitelist.html">this address</a></p>
            <input type="hidden" name="user2" value="%s">
            <input type="hidden" name="url" value="%s">
            <input type="hidden" name="user" value="%s">
            <input type="submit" name="consent" value="I Agree" class="LgnBtn">
            </form>

        </html>
        <HTML>
        """ % (domain,url,clientaddr,clientident,clientident,url,clientident))


    def do_POST(self):
        try:
            #Use this for digest: breaks basic.
            #split_header=re.split(r"[=,]",self.headers['Proxy-Authorization'])
            
            #Basic header:
            #Header looks like: "Basic sldkfjlssjd\r\n"
            uname=decodestring(self.headers['Proxy-Authorization'].split(" ")[1]).split(":")[0]
            
            #Digest header
            #uname_pos=split_header.index("Digest username")
            #uname=split_header[uname_pos+1].strip("\"")
            if uname.isalnum():
                #This is a simple check
                #Username is alpha-numeric
                env = {}
                env['GATEWAY_INTERFACE'] = 'CGI/1.1'
                env['SERVER_PROTOCOL'] = self.protocol_version
                env['REQUEST_METHOD'] = self.command
                if self.headers.typeheader is None:
                    env['CONTENT_TYPE'] = self.headers.type
                else:
                    env['CONTENT_TYPE'] = self.headers.typeheader

                length = self.headers.getheader('content-length')
                if length:
                    env['CONTENT_LENGTH'] = length

                form = cgi.FieldStorage(fp=self.rfile,headers = None, environ=env)
                if uname==form.getfirst("user"):
                    self.add_to_whitelist(form)
                    #self.cgi_info = "/usr/bin/", "whitetrash_add.py"
                    #self.run_cgi()
                else:
                    self.invalid_auth()
            else:
                #User name invalid
                self.invalid_auth()
        except Exception,e:
            self.failed(e) 
            #self.invalid_auth()
        
        
    def do_GET(self):

        try:
            param_start=self.path.index("?")
            results=cgi.parse_qs(self.path[param_start+1:].replace("?","%3F"))
            self.write_form(results)
        except:
            self.invalid_request(self.path)

class WhitetrashHTTPServer(SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    pass

def run(server_class=WhitetrashHTTPServer,
        handler_class=WhitelistCGIRequestHandler):
    server_address = ('127.0.0.1', 8000)
    httpd = server_class(server_address, handler_class)
    
    PIDFILE = '/var/run/whitetrash_serv.pid'
    DAEMON = True 
    LOGFILE = '/var/log/whitetrash.log'

    if (DAEMON):
        # Unix double-fork magic
        try:
            pid = os.fork()
            if pid > 0:
                # exit first parent
                sys.exit(0)
        except OSError, e:
            print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror)
            sys.exit(1)

        # decouple from parent environment
        os.chdir("/")   # don't prevent unmounting
        os.setsid()
        os.umask(0)

        # do second fork
        try:
            pid = os.fork()
            if pid > 0:
                # exit from second parent, print eventual PID before
                open(PIDFILE,'w').write("%d"%pid)
                sys.exit(0)
        except OSError, e:
            print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror)
            sys.exit(1)
    
    
        # redirect outputs to a log file
        sys.stdout = sys.stderr = Log(open(LOGFILE, 'a+'))
	print "***** Whitetrash Server Started - " + str(time.asctime()) + " *****\n"

    httpd.serve_forever()

run()
